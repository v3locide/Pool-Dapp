pipeline{
    agent any
    tools {
        nodejs "NodeJS-22.11.0"
    }
    environment{
        FOUNDRY_PATH = "/var/lib/jenkins/.foundry/bin/"
        BACKEND_IMAGE_NAME = "velocide/foundry"
        DOCKER_HUB_CREDENTIALS_ID = "dockerhub_id"
        IMAGE_TAG = "latest"
	K8S_CERTIFICATE = "k8s_cert"
	K8S_SERVER = "'https://master-node:6443"
    }
    stages{
        stage("Fetch"){
            steps{
                git branch: 'pool-docker', url: "https://github.com/v3locide/Pool-Dapp.git"
            }
        }
        stage("Backend: Setup environment"){
            steps{
                dir("${env.WORKSPACE}/backend") {
                    sh '''
                    pwd
                    curl -L https://foundry.paradigm.xyz | bash
                    . /var/lib/jenkins/.bashrc && foundryup
                    rm -rf lib
                    forge install OpenZeppelin/openzeppelin-contracts --no-commit
                    '''
                    sh "npm install --save-dev solhint"
                }
            }
        }
        stage("Backend: Lint tests") {
            steps{
                dir("${env.WORKSPACE}/backend") {
                    sh "npx solhint src/*.sol"
                }
            }
        }
        stage("Backend: Forge tests") {
            steps{
                dir("${env.WORKSPACE}/backend") {
                    sh "${env.FOUNDRY_PATH}forge test -vvvvv"
                }
            }
        }
        stage("Backend: Build Docker Image") {
            steps{
                script {
                    dockerBackendImage = docker.build(BACKEND_IMAGE_NAME + ":$IMAGE_TAG", "./backend/")
                }
            }
        }
        stage('Backend: Push Image') {
            steps{
                script {
                    docker.withRegistry ('', DOCKER_HUB_CREDENTIALS_ID) {
                        dockerBackendImage.push()
                    }
                }              
            }
        }
		stage('Install Kubectl') {
			steps {
				sh '''
				curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                chmod +x kubectl
                sudo mv kubectl /usr/bin/kubectl
				'''
			}
		}
        stage('Backend: Deploy to Kubernetes') {
            steps {
                dir("${env.WORKSPACE}/infra") {
                    script {
                        kubeconfig(caCertificate: K8S_CERTIFICATE, credentialsId: 'kubeconfig', serverUrl: K8S_SERVER) {
			                sh '''
                            kubectl apply -f anvil-service.yaml
                            sleep 1
                            kubectl apply -f anvil-deployment.yaml
                            '''
                            sh '''
                            sleep 3 
                            kubectl apply -f contract-script-deployment.yaml
			    sleep 5
			    kubectl delete -f contract-script-deployment.yaml
			    sleep 3
                            '''
                        }
                    }
                }
            }
        }
    }
    post{
        success{
            echo "========pipeline executed successfully========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}
